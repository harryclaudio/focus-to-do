[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "users.account",
        "description": "users.account",
        "isExtraImport": true,
        "detail": "users.account",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "users.account",
        "description": "users.account",
        "isExtraImport": true,
        "detail": "users.account",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "Register",
        "importPath": "user_auth.register",
        "description": "user_auth.register",
        "isExtraImport": true,
        "detail": "user_auth.register",
        "documentation": {}
    },
    {
        "label": "Functionalities",
        "importPath": "focus_todo.functionalities",
        "description": "focus_todo.functionalities",
        "isExtraImport": true,
        "detail": "focus_todo.functionalities",
        "documentation": {}
    },
    {
        "label": "Professional",
        "importPath": "users.professional",
        "description": "users.professional",
        "isExtraImport": true,
        "detail": "users.professional",
        "documentation": {}
    },
    {
        "label": "StudentPersonal",
        "importPath": "users.student_personal",
        "description": "users.student_personal",
        "isExtraImport": true,
        "detail": "users.student_personal",
        "documentation": {}
    },
    {
        "label": "LogIn",
        "importPath": "user_auth.log_in",
        "description": "user_auth.log_in",
        "isExtraImport": true,
        "detail": "user_auth.log_in",
        "documentation": {}
    },
    {
        "label": "Functionalities",
        "kind": 6,
        "importPath": "focus_todo.functionalities",
        "description": "focus_todo.functionalities",
        "peekOfCode": "class Functionalities:\n    def __init__(self, accounts, email):\n        self.email = email\n        self.accounts = accounts\n        self.option = 0\n        self.id_task = 0\n        self.task_information = {}\n    def save_data(self, filename, data):\n        with open(filename, 'a') as file:\n            file.write(data)",
        "detail": "focus_todo.functionalities",
        "documentation": {}
    },
    {
        "label": "clear_console",
        "kind": 2,
        "importPath": "focus_todo.functionalities",
        "description": "focus_todo.functionalities",
        "peekOfCode": "def clear_console():\n    os.system('cls' if os.name == 'nt' else 'clear')\nclass Functionalities:\n    def __init__(self, accounts, email):\n        self.email = email\n        self.accounts = accounts\n        self.option = 0\n        self.id_task = 0\n        self.task_information = {}\n    def save_data(self, filename, data):",
        "detail": "focus_todo.functionalities",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "users.account",
        "description": "users.account",
        "peekOfCode": "class Account:\n    def __init__ (self, id_user, name, lastname, email, password, account_type):\n        self.id = id_user\n        self.name = name\n        self.lastname = lastname\n        self.email = email\n        self.password = password\n        self.account_type = account_type\n    def get_id(self):\n        return self.id",
        "detail": "users.account",
        "documentation": {}
    },
    {
        "label": "Professional",
        "kind": 6,
        "importPath": "users.professional",
        "description": "users.professional",
        "peekOfCode": "class Professional(Account):\n    def __init__(self, id_user, name, lastname, email, password, account_type, company, charge):\n        super().__init__(id_user, name, lastname, email, password, account_type)\n        self.company = company\n        self.charge = charge\n    def get_company(self):\n        return self.company\n    def get_charge(self):\n        return self.charge\n    def set_company(self, company):",
        "detail": "users.professional",
        "documentation": {}
    },
    {
        "label": "StudentPersonal",
        "kind": 6,
        "importPath": "users.student_personal",
        "description": "users.student_personal",
        "peekOfCode": "class StudentPersonal(Account):\n    def __init__(self, id_user, name, lastname, email, password, account_type, birthdate, country):\n        super().__init__(id_user, name, lastname, email, password, account_type)\n        self.birthdate = birthdate\n        self.country =  country\n    def get_birthdate(self):\n        return self.birthdate\n    def get_country(self):\n        return self.country\n    def set_birthdate(self, birthdate):",
        "detail": "users.student_personal",
        "documentation": {}
    },
    {
        "label": "LogIn",
        "kind": 6,
        "importPath": "user_auth.log_in",
        "description": "user_auth.log_in",
        "peekOfCode": "class LogIn:\n    def __init__(self):\n        self.option = -1\n        self.accounts_personal_student = {}\n        self.accounts_professional  = {}\n    def load_data_accounts_personal_or_student(self, email_user, password_user):\n        with open(\"user_database/users_personal_or_student.txt\", \"r\") as file:\n            for line in file:\n                id_user, name, lastname, email, password, account_type, birthdate, country = line.rstrip().split(\"|\")\n                if email == email_user and password == password_user:",
        "detail": "user_auth.log_in",
        "documentation": {}
    },
    {
        "label": "clear_console",
        "kind": 2,
        "importPath": "user_auth.log_in",
        "description": "user_auth.log_in",
        "peekOfCode": "def clear_console():\n    os.system('cls' if os.name == 'nt' else 'clear')\nclass LogIn:\n    def __init__(self):\n        self.option = -1\n        self.accounts_personal_student = {}\n        self.accounts_professional  = {}\n    def load_data_accounts_personal_or_student(self, email_user, password_user):\n        with open(\"user_database/users_personal_or_student.txt\", \"r\") as file:\n            for line in file:",
        "detail": "user_auth.log_in",
        "documentation": {}
    },
    {
        "label": "Register",
        "kind": 6,
        "importPath": "user_auth.register",
        "description": "user_auth.register",
        "peekOfCode": "class Register:  \n    def __init__(self):\n        self.id_personal_or_student = 0\n        self.id_professional = 0\n    def save_data(self, filename, data):\n        with open(filename, 'a') as file:\n            file.write(data)\n    def load_data_user_personal_or_student(self):\n        try:\n            with open(\"user_database/users_personal_or_student.txt\", 'r') as file:",
        "detail": "user_auth.register",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "login = LogIn()\nlogin.log_in()",
        "detail": "main",
        "documentation": {}
    }
]